//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace intcom.web.Tests.CloudServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudServices.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/setAccessCondition", ReplyAction="http://tempuri.org/IServices/setAccessConditionResponse")]
        void setAccessCondition(long filesize);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServices/setAccessCondition", ReplyAction="http://tempuri.org/IServices/setAccessConditionResponse")]
        System.IAsyncResult BeginsetAccessCondition(long filesize, System.AsyncCallback callback, object asyncState);
        
        void EndsetAccessCondition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/ulpload", ReplyAction="http://tempuri.org/IServices/ulploadResponse")]
        void ulpload(string[] files);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServices/ulpload", ReplyAction="http://tempuri.org/IServices/ulploadResponse")]
        System.IAsyncResult Beginulpload(string[] files, System.AsyncCallback callback, object asyncState);
        
        void Endulpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/download", ReplyAction="http://tempuri.org/IServices/downloadResponse")]
        void download(string key, string destination);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServices/download", ReplyAction="http://tempuri.org/IServices/downloadResponse")]
        System.IAsyncResult Begindownload(string key, string destination, System.AsyncCallback callback, object asyncState);
        
        void Enddownload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/getAll", ReplyAction="http://tempuri.org/IServices/getAllResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        object getAll();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServices/getAll", ReplyAction="http://tempuri.org/IServices/getAllResponse")]
        System.IAsyncResult BegingetAll(System.AsyncCallback callback, object asyncState);
        
        object EndgetAll(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : intcom.web.Tests.CloudServices.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<intcom.web.Tests.CloudServices.IServices>, intcom.web.Tests.CloudServices.IServices {
        
        private BeginOperationDelegate onBeginsetAccessConditionDelegate;
        
        private EndOperationDelegate onEndsetAccessConditionDelegate;
        
        private System.Threading.SendOrPostCallback onsetAccessConditionCompletedDelegate;
        
        private BeginOperationDelegate onBeginulploadDelegate;
        
        private EndOperationDelegate onEndulploadDelegate;
        
        private System.Threading.SendOrPostCallback onulploadCompletedDelegate;
        
        private BeginOperationDelegate onBegindownloadDelegate;
        
        private EndOperationDelegate onEnddownloadDelegate;
        
        private System.Threading.SendOrPostCallback ondownloadCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAllDelegate;
        
        private EndOperationDelegate onEndgetAllDelegate;
        
        private System.Threading.SendOrPostCallback ongetAllCompletedDelegate;
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setAccessConditionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ulploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> downloadCompleted;
        
        public event System.EventHandler<getAllCompletedEventArgs> getAllCompleted;
        
        public void setAccessCondition(long filesize) {
            base.Channel.setAccessCondition(filesize);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetAccessCondition(long filesize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetAccessCondition(filesize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetAccessCondition(System.IAsyncResult result) {
            base.Channel.EndsetAccessCondition(result);
        }
        
        private System.IAsyncResult OnBeginsetAccessCondition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long filesize = ((long)(inValues[0]));
            return this.BeginsetAccessCondition(filesize, callback, asyncState);
        }
        
        private object[] OnEndsetAccessCondition(System.IAsyncResult result) {
            this.EndsetAccessCondition(result);
            return null;
        }
        
        private void OnsetAccessConditionCompleted(object state) {
            if ((this.setAccessConditionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setAccessConditionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setAccessConditionAsync(long filesize) {
            this.setAccessConditionAsync(filesize, null);
        }
        
        public void setAccessConditionAsync(long filesize, object userState) {
            if ((this.onBeginsetAccessConditionDelegate == null)) {
                this.onBeginsetAccessConditionDelegate = new BeginOperationDelegate(this.OnBeginsetAccessCondition);
            }
            if ((this.onEndsetAccessConditionDelegate == null)) {
                this.onEndsetAccessConditionDelegate = new EndOperationDelegate(this.OnEndsetAccessCondition);
            }
            if ((this.onsetAccessConditionCompletedDelegate == null)) {
                this.onsetAccessConditionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetAccessConditionCompleted);
            }
            base.InvokeAsync(this.onBeginsetAccessConditionDelegate, new object[] {
                        filesize}, this.onEndsetAccessConditionDelegate, this.onsetAccessConditionCompletedDelegate, userState);
        }
        
        public void ulpload(string[] files) {
            base.Channel.ulpload(files);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginulpload(string[] files, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginulpload(files, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void Endulpload(System.IAsyncResult result) {
            base.Channel.Endulpload(result);
        }
        
        private System.IAsyncResult OnBeginulpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] files = ((string[])(inValues[0]));
            return this.Beginulpload(files, callback, asyncState);
        }
        
        private object[] OnEndulpload(System.IAsyncResult result) {
            this.Endulpload(result);
            return null;
        }
        
        private void OnulploadCompleted(object state) {
            if ((this.ulploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ulploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ulploadAsync(string[] files) {
            this.ulploadAsync(files, null);
        }
        
        public void ulploadAsync(string[] files, object userState) {
            if ((this.onBeginulploadDelegate == null)) {
                this.onBeginulploadDelegate = new BeginOperationDelegate(this.OnBeginulpload);
            }
            if ((this.onEndulploadDelegate == null)) {
                this.onEndulploadDelegate = new EndOperationDelegate(this.OnEndulpload);
            }
            if ((this.onulploadCompletedDelegate == null)) {
                this.onulploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnulploadCompleted);
            }
            base.InvokeAsync(this.onBeginulploadDelegate, new object[] {
                        files}, this.onEndulploadDelegate, this.onulploadCompletedDelegate, userState);
        }
        
        public void download(string key, string destination) {
            base.Channel.download(key, destination);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Begindownload(string key, string destination, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begindownload(key, destination, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void Enddownload(System.IAsyncResult result) {
            base.Channel.Enddownload(result);
        }
        
        private System.IAsyncResult OnBegindownload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string destination = ((string)(inValues[1]));
            return this.Begindownload(key, destination, callback, asyncState);
        }
        
        private object[] OnEnddownload(System.IAsyncResult result) {
            this.Enddownload(result);
            return null;
        }
        
        private void OndownloadCompleted(object state) {
            if ((this.downloadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.downloadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void downloadAsync(string key, string destination) {
            this.downloadAsync(key, destination, null);
        }
        
        public void downloadAsync(string key, string destination, object userState) {
            if ((this.onBegindownloadDelegate == null)) {
                this.onBegindownloadDelegate = new BeginOperationDelegate(this.OnBegindownload);
            }
            if ((this.onEnddownloadDelegate == null)) {
                this.onEnddownloadDelegate = new EndOperationDelegate(this.OnEnddownload);
            }
            if ((this.ondownloadCompletedDelegate == null)) {
                this.ondownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndownloadCompleted);
            }
            base.InvokeAsync(this.onBegindownloadDelegate, new object[] {
                        key,
                        destination}, this.onEnddownloadDelegate, this.ondownloadCompletedDelegate, userState);
        }
        
        public object getAll() {
            return base.Channel.getAll();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAll(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAll(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetAll(System.IAsyncResult result) {
            return base.Channel.EndgetAll(result);
        }
        
        private System.IAsyncResult OnBegingetAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAll(callback, asyncState);
        }
        
        private object[] OnEndgetAll(System.IAsyncResult result) {
            object retVal = this.EndgetAll(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAllCompleted(object state) {
            if ((this.getAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAllCompleted(this, new getAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAllAsync() {
            this.getAllAsync(null);
        }
        
        public void getAllAsync(object userState) {
            if ((this.onBegingetAllDelegate == null)) {
                this.onBegingetAllDelegate = new BeginOperationDelegate(this.OnBegingetAll);
            }
            if ((this.onEndgetAllDelegate == null)) {
                this.onEndgetAllDelegate = new EndOperationDelegate(this.OnEndgetAll);
            }
            if ((this.ongetAllCompletedDelegate == null)) {
                this.ongetAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAllCompleted);
            }
            base.InvokeAsync(this.onBegingetAllDelegate, null, this.onEndgetAllDelegate, this.ongetAllCompletedDelegate, userState);
        }
    }
}
